{
  "name": "STM32_Slow_PWM",
  "version": "1.2.3",
  "keywords": "timing, device, control, timer, pwm, interrupt, isr, isr-based, hardware-timer, mission-critical, accuracy, non-blocking, stm32, stm32h7, stm32l5, stm32f1, stm32f4, stm32f7, stm32g4, precise, hardware",
  "description": "This library enables you to use Hardware Timers on STM32F/L/H/G/WB/MP1 boards to create and output PWM to pins. The most important feature is they're purely hardware-based PWM channels. Therefore, their executions are not blocked by bad-behaving functions or tasks. This important feature is absolutely necessary for mission-critical tasks. These hardware timers, using interrupt, still work even if other functions are blocking. Moreover, they are much more precise (certainly depending on clock frequency accuracy) than other software timers using millis() or micros(). That's necessary if you need to measure some data requiring better accuracy. PWM feature can now be used. Max PWM frequency is limited at 1000Hz. Now you can change the PWM settings on-the-fly",
  "authors":
  {
    "name":  "Khoi Hoang",
    "url":   "https://github.com/khoih-prog",
    "maintainer": true
  },
  "repository":
  {
    "type": "git",
    "url": "https://github.com/khoih-prog/STM32_Slow_PWM.git"
  },
  "homepage": "https://github.com/khoih-prog/STM32_Slow_PWM",
  "export": {
    "exclude": [
      "linux",
      "extras",
      "tests"
    ]
  },
  "license": "MIT",
  "frameworks": "*",
  "platforms": "ststm32",
  "examples": "examples/*/*/*.ino",
  "headers": ["STM32_Slow_PWM.h", "STM32_Slow_PWM.hpp"]
}
